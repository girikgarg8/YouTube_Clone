Welcome to notes on YouTube clone

See the arhcitecture of this app here:  https://drive.google.com/file/d/1QDA1JxnppR8__oet_VhHYKIp1ERxJC-W/view?ts=63fac829  and https://drive.google.com/file/d/1QJKg_udwETdxBMAoqhDME2jA6k9A3MuN/view?ts=63fac841
npx create-react-app means we are exceuting a NPM package create-react-app using NPM

reportWebVitals is a function that is used to report performance metrics of a web application to various web analytics tools or dashboards. 

The reportWebVitals function takes in a callback function as a parameter, which is called every time a performance metric is collected for the web application. This callback function can then be used to send the performance data to various analytics tools or dashboards, such as Google Analytics, to analyze and monitor the performance of the application.

StrictMode is a React Developer Tool primarily used for highlighting possible problems in a web application. It activates additional deprecation checks and warnings for its child components. One of the reasons for its popularity is the fact that it provides visual feedback (warning/error messages) whenever the React guidelines and recommended practices are not followed. Just like the React Fragment, the React StrictMode Component does not render any visible UI. 

For styling the header, I will use grid to style the app. Grid basically divides the section into 12 pieces.

The action of clicking on hamburger icon, and the collapsing of hamburger icon, is something that requires me to use a state variable.

Where should I store this state variable? Inside header/body/app component? The correct answer is none of these, because I have to be far-sighted as the action of clicking on hamburger can happen anywhere inside the app, so I should use Redux, so I install reduxjs/toolkit and react-redux

After configuring Redux in my app, I need to check in the interview whether Redux has been properly configured or not, for that I can use either useSelector hook or the React extension.

Now, as the sidebar component depends on the isMenuOpen option in slice, the sideBar needs to subscribe to the slice using useSelector hook. There's one important thing, I will not subscribe to the entire store, but I will subscribe to only the specified value in the slice. (this point was discussed in Namaste React  series too, the reason is that slice is huge )
and it makes my app less performant if I subscribe to the entire slice)

I can use early return in the sideBar component in case the toggledOption is true.

Early return pattern: Early return is a coding pattern in React (and in programming in general) that involves exiting a function or block of code as soon as a certain condition is met, rather than continuing to execute the rest of the code.

In the context of React, early return is often used in rendering functions to handle certain edge cases or error conditions. For example, if you have a component that expects a certain prop to be passed in, you might use early return to check if the prop exists and return a different JSX element or message if it is missing or invalid.

When designing the videoContainer,  we should ask the interviewer, where will we get the data from? Will we hardcoded or will we get it from an API?

Here, I am using YouTube API, so I use API key.

(Curiosity in my mind:Why do I need API keys?)

An API key is a unique identifier that allows you to access an application programming interface (API) or a web service. When you use an API key, you can access the functionality of the service or API from your own application, website, or mobile app.

You might need to create an API key for a variety of reasons, such as:

Authentication: Many APIs require an API key as a way to authenticate and authorize access to their services. The API key identifies your application, and the API can check that key to make sure it is authorized to access the service.

Rate limiting: Some APIs limit the number of requests that you can make in a given time period. By using an API key, the API can track the number of requests your application has made, and limit them if necessary.

Billing: Some APIs charge for usage, and require an API key to keep track of the usage and to bill you for it.

Security: By requiring an API key, the API provider can track usage and identify any potential security breaches or misuse of their service.

I can use the fetch to do API calls, there isn't something very special about Axios. Fetch can be used in production as well.

Use console.log of objects wherever stuck or in confusion.

After making the videos page, let's know make the watch page and set up the React Routing

===Important point: One of my doubts answered: Why do I need to define "/" as a children in the createBrowserRouter, when path "/" already exists in the following code:
const appRouter = createBrowserRouter([
  {
    path: "/",
    element: <Body />,
    children: [
      {
        path: "/",
        element: <MainContainer />,
      },
      {
        path: "watch",
        element: <WatchPage />,
      }) 
===

n React Router, you need to define the "/" route both as a parent and as a child in the router configuration. The reason for this is that the parent "/" route is used to define the common layout or template for all routes, whereas the child "/" route is used to define the specific content for the home page.

In the given code, the parent "/" route is defined with the path: "/" and element: <Body /> properties, which means that the Body component will be rendered for all routes that start with "/". The Body component includes a Sidebar component and an Outlet component, which is used to render the child components of the current route.

The child "/" route is defined with the path: "/" and element: <MainContainer /> properties, which means that the MainContainer component will be rendered for the home page (i.e., the root URL "/"). The MainContainer component is rendered inside the Outlet component of the Body component, which means that it will be rendered in the main content area of the page.

===What does Outlet do, in simple words?===

When you use an outlet, you define a set of routes in your application, each of which is associated with a specific component that should be rendered when the URL matches the route's path. The outlet component then renders the component associated with the current route.

A more beatiful defintion (which can be used in interviews): An <Outlet> should be used in parent route elements to render their child route elements. This allows nested UI to show up when child routes are rendered. Example of parent route element is "/about" and example of child route element is "/about/user"

In order to close the sidebar when I click on any particular video, I weill dispatch an action to close the menu in the WatchPage component

===Building youtube advanced===

Higher order component is a function that takes a component and return a new component.

Usecase: suppose that on YouTube, I want to display the ads with a different video card, so I can modify the existing video card component, and maybe make changes to display "Ad" in front of the video and not use a channel name (as ads don't have channel name on YouTube)

Important interview question: Build the search functionality, search is required for almost all React apps.

Whenever I search for any text on any app 
(like YouTube or Google ), it makes API calls.

What is the concept of debouncing (explained with a real life usecase): let's say I type "iphone pro max" slowly in the search bar, so it will make API calls for each and every keystroke in the search text, but if I enter the text fast, then it will make less number of API calls.

So, basically, I can specify that if difference of time between two keystrokes is less than 200 ms, don't make an API call.

so, technically this is known as debouncing with 200ms, debouncing is nothing but setting setInterval with a duration of 200 ms to make an API call in this case (there's a video by akshay sir on debouncing)

Debouncing will lead to a huge improvement in performance, for example,

--- "iphone pro max": without debouncing: 14 letters*1000=14000 API calls if 1000 users

--with debouncing: 3 API calls*1000= 3000 API calls

===Very important concept, how to use debouncing in React...many people memorise this code, but I am a smart developer :D, so I believe in understanding things===

So, let's understand how I can use debouncing in React



